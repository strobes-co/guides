{
  "metadata": {
    "type": "automation-workflow",
    "version": 1,
    "exportedAt": "2025-10-08T00:00:00.000Z"
  },
  "workflow": {
    "tool": 1,
    "name": "Exploit/Patch Availability Alert",
    "module": 2,
    "role": null,
    "searchQuery": "exploit_available=true or patch_available=true",
    "instructions": null,
    "weightage": 0,
    "ignoreWeightage": false,
    "hooks": {
      "adhoc": true,
      "on_bug_create": true
    },
    "triggers": {
      "finding_tags": {
        "tags": ["{{exploit_tag}}", "{{patch_tag}}"],
        "mode": "add"
      },
      "finding_custom_field": {
        "field_slug": "remediation_urgency",
        "field_value": "{{urgency_level}}"
      },
      "slack": {
        "template": "{{urgency_icon}} {{alert_type}}: {{title}} on {{asset_name}}\nSeverity: {{severity_label}} | {{details}}",
        "webhook_url": "https://hooks.slack.com/services/REPLACE/ME/WEBHOOK",
        "all_possible_pipeline_keys": null
      },
      "email": {
        "email_type": "smtp_email",
        "to": ["security-urgent@example.com", "asset-owners@example.com"],
        "cc": [],
        "subject": "{{urgency_icon}} {{alert_type}}: {{title}}",
        "body": "{{alert_type}} Detected\n\nFinding: {{title}}\nAsset: {{asset_name}}\nSeverity: {{severity_label}}\nState: {{state_label}}\n\n{{details}}\n\nRecommended Actions:\n{{recommended_actions}}\n\nStrobes Finding ID: {{id}}",
        "all_possible_pipeline_keys": null
      },
      "workflow_mode": 1,
      "all_possible_pipeline_keys": ["id", "title", "asset_name", "severity_label", "state_label", "alert_type", "urgency_icon", "details", "urgency_level", "recommended_actions", "exploit_tag", "patch_tag"]
    },
    "workflowMode": 1,
    "scheduleTime": null,
    "scheduleFrequency": 1,
    "scheduleDayOfWeek": null,
    "timezone": null,
    "llmModel": 0,
    "pipelineCode": "def run_pipeline(obj):\n    sev_map={1:'Info',2:'Low',3:'Medium',4:'High',5:'Critical'}\n    state_map={0:'New',1:'Active',2:'Resolved',3:'Duplicate',4:'Not Applicable',5:'Committed',6:'Accepted Risk',7:\"Won't Fix\"}\n    asset_name = getattr(getattr(obj, 'asset', None), 'name', '')\n    has_exploit = getattr(obj, 'exploit_available', False)\n    has_patch = getattr(obj, 'patch_available', False)\n    if has_exploit and has_patch:\n        alert_type = 'EXPLOIT & PATCH AVAILABLE'\n        urgency_icon = '‚ö†Ô∏èüîß'\n        details = 'Public exploit is available AND patch is available'\n        urgency_level = 'Critical - Patch Immediately'\n        recommended_actions = '1. Apply patch immediately\\n2. Monitor for exploitation attempts\\n3. Review access logs'\n        exploit_tag = 'exploit-available'\n        patch_tag = 'patch-available'\n    elif has_exploit:\n        alert_type = 'EXPLOIT AVAILABLE'\n        urgency_icon = '‚ö†Ô∏è'\n        details = 'Public exploit is available - HIGH RISK'\n        urgency_level = 'Critical - Mitigate Now'\n        recommended_actions = '1. Implement compensating controls\\n2. Monitor for exploitation\\n3. Expedite patch deployment'\n        exploit_tag = 'exploit-available'\n        patch_tag = ''\n    else:\n        alert_type = 'PATCH AVAILABLE'\n        urgency_icon = 'üîß'\n        details = 'Vendor patch is available'\n        urgency_level = 'High - Schedule Patching'\n        recommended_actions = '1. Review patch notes\\n2. Test in staging\\n3. Schedule production deployment'\n        exploit_tag = ''\n        patch_tag = 'patch-available'\n    return {'id': obj.id, 'title': obj.title, 'asset_name': asset_name, 'severity_label': sev_map.get(obj.severity, str(obj.severity)), 'state_label': state_map.get(obj.state, str(obj.state)), 'alert_type': alert_type, 'urgency_icon': urgency_icon, 'details': details, 'urgency_level': urgency_level, 'recommended_actions': recommended_actions, 'exploit_tag': exploit_tag, 'patch_tag': patch_tag}",
    "credentialManagerId": null,
    "documents": [],
    "documentIds": []
  }
}

