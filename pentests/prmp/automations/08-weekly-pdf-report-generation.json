{
  "metadata": {
    "type": "automation-workflow",
    "version": 1,
    "exportedAt": "2025-10-08T00:00:00.000Z"
  },
  "workflow": {
    "tool": 1,
    "name": "Weekly PDF Report Generation & Email",
    "module": 2,
    "role": null,
    "searchQuery": "id!=0",
    "instructions": null,
    "weightage": 0,
    "ignoreWeightage": true,
    "hooks": {
      "adhoc": true
    },
    "triggers": {
      "generate_report_send_email": {
        "email_type": "smtp_email",
        "to": ["executives@example.com", "stakeholders@example.com"],
        "cc": ["pentest-team@example.com"],
        "subject": "Weekly Security Report: {{week_start}} to {{week_end}}",
        "body": "Weekly Security Assessment Report\n\nPeriod: {{week_start}} to {{week_end}}\n\nExecutive Summary:\n\nNew Findings: {{new_total}}\nResolved: {{resolved_total}}\nOpen Findings: {{open_total}}\n\nBy Severity:\n- Critical: {{critical_count}}\n- High: {{high_count}}\n- Medium: {{medium_count}}\n- Low: {{low_count}}\n\nTop 5 Affected Assets:\n{% for a in top_assets %}{{forloop.counter}}. {{a.assetName}}: {{a.total}} findings\n{% endfor %}\n\nPlease find the detailed PDF report attached.\n\nNext Steps:\n1. Review critical and high findings\n2. Assign owners for remediation\n3. Schedule follow-up for next week\n\nFor questions, contact the security team.",
        "report_template_id": 1,
        "module": 2,
        "all_possible_pipeline_keys": null
      },
      "slack": {
        "template": "ðŸ“Š Weekly report generated and sent!\n\nPeriod: {{week_start}} to {{week_end}}\nNew: {{new_total}} | Resolved: {{resolved_total}} | Open: {{open_total}}",
        "webhook_url": "https://hooks.slack.com/services/REPLACE/ME/WEBHOOK",
        "all_possible_pipeline_keys": null
      },
      "workflow_mode": 2
    },
    "workflowMode": 2,
    "scheduleTime": "17:00",
    "scheduleFrequency": 2,
    "scheduleDayOfWeek": 5,
    "timezone": "UTC",
    "llmModel": 0,
    "pipelineCode": "def run_pipeline(queryset):\n    week_start = (datetime.datetime.now() - timedelta(days=7)).date().isoformat()\n    week_end = datetime.datetime.now().date().isoformat()\n    new_q = f'(created>={week_start})'\n    resolved_q = f'(updated>={week_start}) and (state=2)'\n    new_total = count_qs(queryset, new_q)\n    resolved_total = count_qs(queryset, resolved_q)\n    open_total = count_qs(queryset, '(state in (0,1,5))')\n    critical_count = count_qs(queryset, f'{new_q} and (severity=5)')\n    high_count = count_qs(queryset, f'{new_q} and (severity=4)')\n    medium_count = count_qs(queryset, f'{new_q} and (severity=3)')\n    low_count = count_qs(queryset, f'{new_q} and (severity in (1,2))')\n    top_assets = group_qs(queryset, 'asset__name', max_groups=5, search_query=new_q, field_alias={'asset__name':'assetName'})\n    return {'week_start': week_start, 'week_end': week_end, 'new_total': new_total, 'resolved_total': resolved_total, 'open_total': open_total, 'critical_count': critical_count, 'high_count': high_count, 'medium_count': medium_count, 'low_count': low_count, 'top_assets': top_assets}",
    "credentialManagerId": null,
    "documents": [],
    "documentIds": []
  }
}

